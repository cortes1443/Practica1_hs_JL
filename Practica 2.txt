import Data.Time.Clock
import Data.List
import System.IO
import Control.Exception
import Control.Concurrent (threadDelay)
import Data.Maybe (mapMaybe)

-- Definición del tipo de datos para representar la información de un vehículo
data Vehiculo = Estudiante {
    id :: String,
    entrada :: UTCTime,
    salida :: Maybe UTCTime
} deriving (Show, Read)

-- Función para registrar la entrada de un vehículo al parqueadero
registrarEntrada :: String -> UTCTime -> [Estudiante] -> [Estudiante]
registrarEntrada idEstudiante tiempo universidad =
    Estudiante idEstudiante tiempo Nothing : universidad

-- Función para registrar la salida de un vehículo del parqueadero
registrarSalida :: String -> UTCTime -> [Estudiante] -> [Estudiante]
registrarSalida idEstudiante tiempo =
    map (\v -> if id v == idEstudiante then v { salida = Just tiempo } else v)

-- Función para buscar un vehículo por su placa
buscarEstudiante :: String -> [Estudiante] -> Maybe Estudiante
buscarEstudiante idEstudiante universidad =
    find (\v -> id v == idEstudiante) universidad

-- Función para calcular el tiempo que un vehículo permaneció en el parqueadero
tiempoEnUniversidad :: Vehiculo -> UTCTime -> NominalDiffTime
tiempoEnUniversidad vehiculo tiempoActual =
    case salida vehiculo of
        Just tiempoSalida -> diffUTCTime tiempoSalida (entrada vehiculo)
        Nothing           -> diffUTCTime tiempoActual (entrada vehiculo)

-- Función para guardar la información de los vehículos en un archivo de texto
guardarUniversidad :: [Estudiante] -> IO ()
guardarUniversidad universidad = do
    resultado <- reintentar 5 (writeFile "universidad.txt" (unlines (map mostrarEstudiante universidad)))
    case resultado of
        Left ex -> putStrLn $ "Error guardando el registro de la universidad: " ++ show ex
        Right _ -> putStrLn "Registro guardado en el archivo universidad.txt."

-- Función para reintentar una operación en caso de error
reintentar :: Int -> IO a -> IO (Either IOException a)
reintentar 0 accion = catch (accion >>= return . Right) (\(ex :: IOException) -> return (Left ex))
reintentar n accion = do
    resultado <- catch (accion >>= return . Right) (\(ex :: IOException) -> return (Left ex))
    case resultado of
        Left _ -> do
            threadDelay 1000000  -- Esperar 1 segundo antes de reintentar
            reintentar (n - 1) accion
        Right val -> return (Right val)

-- Función para cargar la información de los vehículos desde un archivo de texto
cargarEstudiante :: IO [Estudiante]
cargarEstudiante = do
    resultado <- try (readFile "universidad.txt") :: IO (Either IOException String)
    case resultado of
        Left ex -> do
            putStrLn $ "Error cargando el registro de la universidad: " ++ show ex
            return []
        Right contenido -> do
            let lineas = lines contenido
            return (map leerEstudiante lineas)
    where
        leerEstudiante linea = read linea :: Estudiante

-- Función para mostrar la información de un vehículo
mostrarEstudiante :: Estudiante -> String
mostrarEstudiante estudiante =
    id estudiante ++ "," ++ show (entrada estudiante) ++ "," ++ show (salida estudiante)

-- Función para cargar la información de los vehículos desde un archivo de texto
leerUniversidad :: IO [Estudiante]
leerUniversidad = do
    contenido <- readFile "universidad.txt"
    let lineas = lines contenido
    return (mapMaybe parsearEstudiante lineas)
    where
        parsearEstudiante :: String -> Maybe Estudiante
        parsearEstudiante linea = case words linea of
            [id, entrada, salida] -> Just $ Estudiante id (read entrada) (readMaybeSalida salida)
            _ -> Nothing

        readMaybeSalida :: String -> Maybe UTCTime
        readMaybeSalida "Nothing" = Nothing
        readMaybeSalida salidaStr = Just (read salidaStr)

-- Función principal del programa
main :: IO ()
main = do
    -- Cargar el parqueadero desde el archivo de texto
    parqueadero <- cargarParqueadero
    putStrLn "¡Bienvenido al Sistema de Gestión de Parqueadero!"

    -- Ciclo principal del programa
    cicloPrincipal parqueadero

-- Función para el ciclo principal del programa
cicloPrincipal :: [Vehiculo] -> IO ()
cicloPrincipal parqueadero = do
    putStrLn "Seleccione una opción:"
    putStrLn "1. Registrar entrada de vehículo"
    putStrLn "2. Registrar salida de vehículo"
    putStrLn "3. Buscar vehículo por placa"
    putStrLn "4. Listar los vehículos del parqueadero"
    putStrLn "5. Salir"

    opcion <- getLine
    case opcion of
        "1" -> do
            putStrLn "Ingrese la placa del vehículo:"
            placaVehiculo <- getLine
            tiempoActual <- getCurrentTime
            let parqueaderoActualizado = registrarEntrada placaVehiculo tiempoActual parqueadero
            guardarParqueadero parqueaderoActualizado
            cicloPrincipal parqueaderoActualizado
        "2" -> do
            putStrLn "Ingrese la placa del vehículo:"
            placaVehiculo <- getLine
            tiempoActual <- getCurrentTime
            let parqueaderoActualizado = registrarSalida placaVehiculo tiempoActual parqueadero
            guardarParqueadero parqueaderoActualizado
            cicloPrincipal parqueaderoActualizado
        "3" -> do
            putStrLn "Ingrese la placa del vehículo:"
            placaVehiculo <- getLine
            tiempoActual <- getCurrentTime
            case buscarVehiculo placaVehiculo parqueadero of
                Just vehiculo -> do
                    let tiempoTotal = tiempoEnParqueadero vehiculo tiempoActual
                    putStrLn $ "El vehículo con placa " ++ placaVehiculo ++ " se encuentra en el parqueadero."
                    putStrLn $ "Tiempo en parqueadero: " ++ show tiempoTotal ++ " segundos."
                Nothing -> putStrLn "Vehículo no encontrado en el parqueadero."
            cicloPrincipal parqueadero
        "4" -> do
            putStrLn "Mostrando Lista de carros dentro del parqueadero"
            parqueaderoActualizado <- leerParqueadero
            mapM_ (\v -> putStrLn $ "Placa: " ++ placa v ++ ", Entrada: " ++ show (entrada v) ++ ", Salida: " ++ show (salida v)) parqueaderoActualizado
            cicloPrincipal parqueaderoActualizado
        "5" -> putStrLn "¡Hasta luego!"
        _ -> do
            putStrLn "Opción no válida. Por favor, seleccione una opción válida."
            cicloPrincipal parqueadero
